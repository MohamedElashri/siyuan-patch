name: release-pc

on:
  workflow_dispatch:
    inputs:
      version:
        description: "release version/tag"
        required: true
      packageManager:
        description: "pnpm@x.x.x"
        required: true

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - os: ubuntu-22.04
            kernel_path: "../app/kernel-linux/SiYuan-Kernel"
            build_args: "-s -w -X github.com/siyuan-note/siyuan/kernel/util.Mode=prod"
            electron_args: "dist-linux"
            goos: "linux"
            goarch: "amd64"
            suffix: "linux.tar.gz"
          - os: macos-latest
            kernel_path: "../app/kernel-darwin/SiYuan-Kernel"
            build_args: "-s -w -X github.com/siyuan-note/siyuan/kernel/util.Mode=prod"
            electron_args: "dist-darwin"
            goos: "darwin"
            goarch: "amd64"
            suffix: "mac.dmg"
          - os: macos-latest
            kernel_path: "../app/kernel-darwin-arm64/SiYuan-Kernel"
            build_args: "-s -w -X github.com/siyuan-note/siyuan/kernel/util.Mode=prod"
            electron_args: "dist-darwin-arm64"
            goos: "darwin"
            goarch: "arm64"
            suffix: "mac-arm64.dmg"
          - os: windows-latest
            kernel_path: "../app/kernel/SiYuan-Kernel.exe"
            build_args: "-s -w -H=windowsgui -X github.com/siyuan-note/siyuan/kernel/util.Mode=prod"
            electron_args: "dist"
            goos: "windows"
            gobin: "bin"
            mingwsys: "MINGW64"
            goarch: "amd64"
            suffix: "win.exe"

    steps:
      - uses: actions/checkout@v4
        with:
          path: siyuan-note

      - name: Format version number
        id: format_version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # Remove 'v' prefix if present
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: clone origin and apply patches
        run: |
          mkdir -p ${{ github.workspace }}/go
          cd ${{ github.workspace }}/siyuan-note/

          # Clone the repository without checking out any branch
          git clone https://github.com/siyuan-note/siyuan.git
          cd siyuan
          
          # Fetch the specific tag/version
          git fetch origin ${{ github.event.inputs.version }}
          
          # Hard reset to the tag/version
          git reset --hard FETCH_HEAD
          
          # Apply patches with force and ignoring whitespace
          git apply --ignore-whitespace --reject ${{ github.workspace }}/siyuan-note/patches/siyuan/disable-update.patch || true
          git apply --ignore-whitespace --reject ${{ github.workspace }}/siyuan-note/patches/siyuan/default-config.patch || true
          git apply --ignore-whitespace --reject ${{ github.workspace }}/siyuan-note/patches/siyuan/mock-vip-user.patch || true
          
          # Show status but don't fail if there are changes
          git status || true

      - name: Set up MingGW
        uses: msys2/setup-msys2@v2
        if: contains( matrix.config.goos, 'windows')
        with:
          install: p7zip mingw-w64-x86_64-lua

      - name: Set up TDM-GCC
        run: msys2 -c "bash siyuan-note/siyuan/scripts/get-tdm-gcc.sh tdm https://github.com/jmeubank/tdm-gcc/releases/download/v10.3.0-tdm-1/tdm-gcc-10.3.0.exe" && echo "CC=${{ github.workspace }}/tdm/bin/gcc.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        if: contains( matrix.config.goarch, '386')
        working-directory: ${{ github.workspace }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ github.workspace }}/siyuan-note/siyuan/kernel/go.mod
          cache-dependency-path: "**/*.sum"
      - run: go version

      - name: Set up goversioninfo
        run: go get github.com/josephspurrier/goversioninfo/cmd/goversioninfo && go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo
        if: contains( matrix.config.goos, 'windows')
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/kernel
        env:
          GO111MODULE: on
          CGO_ENABLED: 1
          GOOS: ${{ matrix.config.goos }}
          GOPATH: ${{ github.workspace }}/go
          GOARCH: ${{ matrix.config.goarch }}

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Node pnpm
        run: npm install -g ${{ github.event.inputs.packageManager }}
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/app

      - name: Install Node Dependencies
        run: pnpm install --no-frozen-lockfile
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/app

      - name: Building UI
        run: pnpm run build
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/app

      - name: Generate Icon Resource and Properties/Version Info For Windows
        run: ${{ github.workspace }}\go\${{ matrix.config.gobin }}\goversioninfo -platform-specific=true -icon="resource\icon.ico" -manifest="resource\goversioninfo.exe.manifest"
        if: contains( matrix.config.goos, 'windows')
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/kernel

      - name: Building Kernel
        run: go build --tags fts5 -o "${{ matrix.config.kernel_path }}" -v -ldflags "${{ matrix.config.build_args }}"
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/kernel
        env:
          GO111MODULE: on
          CGO_ENABLED: 1
          GOOS: ${{ matrix.config.goos }}
          GOPATH: ${{ github.workspace }}/go
          GOARCH: ${{ matrix.config.goarch }}

      - name: Building Electron
        run: pnpm run ${{ matrix.config.electron_args }}
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/app

      - name: Create DEB Package
        if: matrix.config.goos == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y fakeroot dpkg-dev imagemagick
          
          # Create directory structure for deb package
          mkdir -p siyuan-deb/DEBIAN
          mkdir -p siyuan-deb/usr/lib/siyuan
          mkdir -p siyuan-deb/usr/share/applications
          mkdir -p siyuan-deb/usr/share/icons/hicolor/512x512/apps
          
          # Copy application files
          cp -r ${{ github.workspace }}/siyuan-note/siyuan/app/build/linux-unpacked/* siyuan-deb/usr/lib/siyuan/
          
          # Create desktop entry
          cat > siyuan-deb/usr/share/applications/siyuan.desktop << EOF
          [Desktop Entry]
          Name=SiYuan
          Comment=A personal knowledge management system
          Exec=/usr/lib/siyuan/siyuan
          Icon=siyuan
          Terminal=false
          Type=Application
          Categories=Office;
          EOF
          
          # Download and convert icon
          wget https://raw.githubusercontent.com/siyuan-note/siyuan/refs/heads/master/kernel/resource/icon.ico -O siyuan.ico
          convert siyuan.ico[0] -resize 512x512 siyuan-deb/usr/share/icons/hicolor/512x512/apps/siyuan.png
          
          # Create control file
          cat > siyuan-deb/DEBIAN/control << EOF
          Package: siyuan
          Version: ${{ steps.format_version.outputs.version }}
          Section: office
          Priority: optional
          Architecture: amd64
          Maintainer: melashri <siyuan@elashri.com>
          Description: SiYuan Note-Taking Software
           SiYuan is a personal knowledge management system that supports 
           building a personal knowledge base.
          EOF
          
          # Build deb package
          fakeroot dpkg-deb --build siyuan-deb
          mv siyuan-deb.deb siyuan-${{ github.event.inputs.version }}-amd64.deb

      - uses: joutvhu/get-release@v1
        id: get_current_release
        with:
          tag_name: ${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Electron App
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_current_release.outputs.upload_url }}
          asset_name: siyuan-${{ github.event.inputs.version }}-${{ matrix.config.suffix }}
          asset_path: ${{ github.workspace }}/siyuan-note/siyuan/app/build/siyuan-*-${{ matrix.config.suffix }}
          asset_content_type: application/octet-stream
          overwrite: true

      - name: Upload DEB Package
        if: matrix.config.goos == 'linux'
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_current_release.outputs.upload_url }}
          asset_name: siyuan-${{ github.event.inputs.version }}-amd64.deb
          asset_path: ${{ github.workspace }}/siyuan-${{ github.event.inputs.version }}-amd64.deb
          asset_content_type: application/vnd.debian.binary-package
          overwrite: true
